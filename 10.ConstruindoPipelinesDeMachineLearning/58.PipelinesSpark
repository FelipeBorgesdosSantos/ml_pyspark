{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9421d1f5",
   "metadata": {},
   "source": [
    "# Método Transformer:\n",
    "- transforma um dataframe\n",
    "\n",
    "Exemplo: \n",
    "    \n",
    "asb = VectorAssembler(inputCols=[\"sepallength\",\"sepalwidth\",\"petallength\",\"petalwidth\"], \n",
    "                               outputCol=\"independente\")\n",
    "instancia um objeto (asb) settando todas as suas propriedades, e aplica o método transform."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "679025cb",
   "metadata": {},
   "source": [
    "# Método Estimator: \n",
    "- algoritmo que é ajustado a um df para criação de um modelo,\n",
    "- Se utiliza do método fit.\n",
    "\n",
    "Exemplo: \n",
    "\n",
    "mlp = MultilayerPerceprtonClassifier(maxIter=100, layers=[4,5,4,3], featuresCol=\"independente\", \n",
    "                                              labelCol=\"dependente\")\n",
    "modelo = mlp.fit(irisTreino)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6e70aba",
   "metadata": {},
   "source": [
    "# Pipeline:\n",
    "- sequencia de fases executadas em ordem que podem ser transformers ou estimators;\n",
    "- instância todos os objetos (variáveis) das etapas, mas não executa fit e transform;\n",
    "- você constrói o pipeline com a sequência de etapas e chama seu método fit ao final à execução\n",
    "- permite reutilização e códigos mais organizados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3aeb1763",
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark, pyspark\n",
    "from pyspark.sql import SparkSession\n",
    "findspark.init()\n",
    "spark = SparkSession.builder.appName(\"Pipelines\").getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d1aa71ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+----------+-----------+----------+-----------+\n",
      "|sepallength|sepalwidth|petallength|petalwidth|      class|\n",
      "+-----------+----------+-----------+----------+-----------+\n",
      "|        5.1|       3.5|        1.4|       0.2|Iris-setosa|\n",
      "|        4.9|       3.0|        1.4|       0.2|Iris-setosa|\n",
      "|        4.7|       3.2|        1.3|       0.2|Iris-setosa|\n",
      "|        4.6|       3.1|        1.5|       0.2|Iris-setosa|\n",
      "|        5.0|       3.6|        1.4|       0.2|Iris-setosa|\n",
      "+-----------+----------+-----------+----------+-----------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "iris = spark.read.csv(\"iris.csv\", header=True, inferSchema=True,sep=\",\")\n",
    "irisTreino, irisTeste = iris.randomSplit([0.7,0.3])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f0a51e",
   "metadata": {},
   "source": [
    "# Instância todos os objetos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3b3eb5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.feature import VectorAssembler\n",
    "vector = VectorAssembler(inputCols=[\"sepallength\",\"sepalwidth\",\"petallength\",\"petalwidth\"],\n",
    "                        outputCol=\"independente\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c65103ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.feature import StringIndexer\n",
    "indexer = StringIndexer(inputCol=\"class\", outputCol=\"dependente\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2dd9ed5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.classification import MultilayerPerceptronClassifier\n",
    "mlp = MultilayerPerceptronClassifier(maxIter=100, layers=[4,5,4,3], featuresCol=\"independente\",\n",
    "                                    labelCol=\"dependente\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cacdd9f",
   "metadata": {},
   "source": [
    "# Criação do pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0512e6db",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml import Pipeline\n",
    "pipeline = Pipeline(stages=[vector, indexer, mlp])\n",
    "modelo = pipeline.fit(irisTreino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "df675a42",
   "metadata": {},
   "outputs": [],
   "source": [
    "previsao = modelo.transform(irisTeste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "917098e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------+----------+--------------------+--------------------+----------+\n",
      "|     independente|dependente|       rawPrediction|         probability|prediction|\n",
      "+-----------------+----------+--------------------+--------------------+----------+\n",
      "|[4.4,3.0,1.3,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.6,3.2,1.4,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.7,3.2,1.6,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.8,3.0,1.4,0.1]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.8,3.4,1.9,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.9,3.1,1.5,0.1]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.9,3.1,1.5,0.1]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[4.9,3.1,1.5,0.1]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.0,3.6,1.4,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.1,2.5,3.0,1.1]|       0.0|[45.0198380344766...|[0.99999999902306...|       0.0|\n",
      "|[5.1,3.4,1.5,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.2,3.4,1.4,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.2,3.5,1.5,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.3,3.7,1.5,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.4,3.7,1.5,0.2]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.4,3.9,1.7,0.4]|       1.0|[-8.7709980749304...|[2.12807076690916...|       1.0|\n",
      "|[5.5,2.5,4.0,1.3]|       0.0|[45.0198380344766...|[0.99999999902306...|       0.0|\n",
      "|[5.5,2.6,4.4,1.2]|       0.0|[45.0198380852986...|[0.99999999902306...|       0.0|\n",
      "|[5.6,2.8,4.9,2.0]|       2.0|[122.805067528171...|[0.05714283544879...|       2.0|\n",
      "|[5.7,2.9,4.2,1.3]|       0.0|[45.0198380344766...|[0.99999999902306...|       0.0|\n",
      "+-----------------+----------+--------------------+--------------------+----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "previsao.select(\"independente\", \"dependente\", \"rawPrediction\", \"probability\",\"prediction\").show(\n",
    "    truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0f8124c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9782608695652174\n"
     ]
    }
   ],
   "source": [
    "from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
    "performance = MulticlassClassificationEvaluator(labelCol=\"dependente\", predictionCol=\"prediction\",\n",
    "                                               metricName=\"accuracy\")\n",
    "acuracia = performance.evaluate(previsao)\n",
    "print(acuracia)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
